AWSTemplateFormatVersion: "2010-09-09"
Description: "Maria Park's code for Final project"

## Parameters: VPC, public and private subnets CIDRs
Parameters:
  VPCCIDR:
    Type: String
    Default: 17.0.0.0/16
  PublicSubnet1CIDR:
    Type: String
    Default: 17.0.1.0/24
  PublicSubnet2CIDR:
    Type: String
    Default: 17.0.2.0/24
  PrivateSubnet1CIDR:
    Type: String
    Default: 17.0.3.0/24
  PrivateSubnet2CIDR:
    Type: String
    Default: 17.0.4.0/24
## Parameters: instance type
  MyInstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t3.micro
    Description: Allowed instance types are t2.micro (by default) and t3.micro.
## Parameters: tags
  ProjectTags1:
    Type: CommaDelimitedList
    Default: "Owner, Maria"
  ProjectTags2:
    Type: CommaDelimitedList
    Default: "Project, Final"

## Mapping AMI by region
Mappings:
  RegionAMImap:
    us-east-1:
      AMIID: "ami-0c101f26f147fa7fd"
    us-east-2:
      AMIID: "ami-019f9b3318b7155c5"
    us-west-1:
      AMIID: "ami-0d5ae304a0b933620"
    us-west-2:
      AMIID: "ami-0a70b9d193ae8a799"  

## Resources
Resources:
  ## VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      Tags: 
        - Key: !Select [ 0, !Ref ProjectTags1 ]
          Value: !Select [ 1, !Ref ProjectTags1 ] 
        - Key: !Select [ 0, !Ref ProjectTags2 ]
          Value: !Select [ 1, !Ref ProjectTags2 ]

  ## Public subnets      
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: us-east-1a
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: "true"
      Tags: 
        - Key: !Select [ 0, !Ref ProjectTags1 ]
          Value: !Select [ 1, !Ref ProjectTags1 ] 
        - Key: !Select [ 0, !Ref ProjectTags2 ]
          Value: !Select [ 1, !Ref ProjectTags2 ] 
      VpcId: !Ref MyVPC
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: us-east-1b
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: "true"      
      Tags: 
        - Key: !Select [ 0, !Ref ProjectTags1 ]
          Value: !Select [ 1, !Ref ProjectTags1 ] 
        - Key: !Select [ 0, !Ref ProjectTags2 ]
          Value: !Select [ 1, !Ref ProjectTags2 ] 
      VpcId: !Ref MyVPC

  ## Private subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: !Ref PrivateSubnet1CIDR
      Tags: 
        - Key: !Select [ 0, !Ref ProjectTags1 ]
          Value: !Select [ 1, !Ref ProjectTags1 ] 
        - Key: !Select [ 0, !Ref ProjectTags2 ]
          Value: !Select [ 1, !Ref ProjectTags2 ] 
      VpcId: !Ref MyVPC
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      CidrBlock: !Ref PrivateSubnet2CIDR
      Tags: 
        - Key: !Select [ 0, !Ref ProjectTags1 ]
          Value: !Select [ 1, !Ref ProjectTags1 ] 
        - Key: !Select [ 0, !Ref ProjectTags2 ]
          Value: !Select [ 1, !Ref ProjectTags2 ] 
      VpcId: !Ref MyVPC

  ## INTERNET GATEWAY for public subnets
  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: !Select [ 0, !Ref ProjectTags1 ]
          Value: !Select [ 1, !Ref ProjectTags1 ] 
        - Key: !Select [ 0, !Ref ProjectTags2 ]
          Value: !Select [ 1, !Ref ProjectTags2 ] 
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MyInternetGateway
      VpcId: !Ref MyVPC
  ## Public route table 
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: !Select [ 0, !Ref ProjectTags1 ]
          Value: !Select [ 1, !Ref ProjectTags1 ] 
        - Key: !Select [ 0, !Ref ProjectTags2 ]
          Value: !Select [ 1, !Ref ProjectTags2 ] 
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref MyInternetGateway
      DestinationCidrBlock: 0.0.0.0/0
  ## Associating public route table to the public subnets
  PublicSubnet1withRT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2withRT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  ## NAT GATEWAY for private subnets
  MyNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt MyNATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags: 
        - Key: !Select [ 0, !Ref ProjectTags1 ]
          Value: !Select [ 1, !Ref ProjectTags1 ] 
        - Key: !Select [ 0, !Ref ProjectTags2 ]
          Value: !Select [ 1, !Ref ProjectTags2 ] 
  MyNATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags: 
        - Key: !Select [ 0, !Ref ProjectTags1 ]
          Value: !Select [ 1, !Ref ProjectTags1 ] 
        - Key: !Select [ 0, !Ref ProjectTags2 ]
          Value: !Select [ 1, !Ref ProjectTags2 ] 
  ## Private route table 
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: !Select [ 0, !Ref ProjectTags1 ]
          Value: !Select [ 1, !Ref ProjectTags1 ] 
        - Key: !Select [ 0, !Ref ProjectTags2 ]
          Value: !Select [ 1, !Ref ProjectTags2 ] 
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      GatewayId: !Ref MyInternetGateway
      DestinationCidrBlock: 0.0.0.0/0
  ## Associating private route table to the private subnets
  PrivateSubnet1withRT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1
  PrivateSubnet2withRT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2


  ## LAUNCH TEMPLATE
  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData: 
        ImageId: !FindInMap [ RegionAMImap, !Ref "AWS::Region", AMIID ]
        InstanceType: !Ref MyInstanceType
        KeyName: !Ref MyKeyPair
        SecurityGroupIds: 
          - !GetAtt MySecurityGroup.GroupId       
        UserData:
          ## Bash script to install and run httpd and print whether it is a public or private instance
          Fn::Base64: !Sub |
            #!/bin/bash 
            yum update -y
            yum install httpd -y
            systemctl enable httpd
            systemctl start httpd
            echo "<h1> This is Maria's Final project. Hello from $HOSTNAME! </h1>" > /var/www/html/index.html
            if [[ "$HOSTNAME" == ip-17-0-1-*\.ec2\.internal ]]; then
                echo "<h3> It's a public instance in a public subnet 17.0.1.0/24 </h3>" >> /var/www/html/index.html
            elif [[ "$HOSTNAME" == ip-17-0-2-*\.ec2\.internal ]]; then
                echo "<h3> It's a public instance in a public subnet 17.0.2.0/24 </h3>" >> /var/www/html/index.html
            elif [[ "$HOSTNAME" == ip-17-0-3-*\.ec2\.internal ]]; then
                echo "<h3> It's a private instance in a private subnet 17.0.3.0/24 </h3>" >> /var/www/html/index.html
            elif [[ "$HOSTNAME" == ip-17-0-4-*\.ec2\.internal ]]; then
                echo "<h3> It's a private instance in a private subnet 17.0.4.0/24 </h3>" >> /var/www/html/index.html
            fi
        TagSpecifications:
          - ResourceType: instance
            Tags: 
              - Key: !Select [ 0, !Ref ProjectTags1 ]
                Value: !Select [ 1, !Ref ProjectTags1 ] 
              - Key: !Select [ 0, !Ref ProjectTags2 ]
                Value: !Select [ 1, !Ref ProjectTags2 ] 
      LaunchTemplateName: launchtemplate-finalproject
      TagSpecifications:
        - ResourceType: launch-template
          Tags: 
            - Key: !Select [ 0, !Ref ProjectTags1 ]
              Value: !Select [ 1, !Ref ProjectTags1 ] 
            - Key: !Select [ 0, !Ref ProjectTags2 ]
              Value: !Select [ 1, !Ref ProjectTags2 ] 
  ## Key pair for instances
  MyKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyFormat: pem
      KeyName: key-finalproject
      KeyType: rsa
      Tags: 
        - Key: !Select [ 0, !Ref ProjectTags1 ]
          Value: !Select [ 1, !Ref ProjectTags1 ] 
        - Key: !Select [ 0, !Ref ProjectTags2 ]
          Value: !Select [ 1, !Ref ProjectTags2 ] 
  ## Security group allows ssh and http         
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ssh and http
      GroupName: securitygroup-finalproject
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      Tags: 
        - Key: !Select [ 0, !Ref ProjectTags1 ]
          Value: !Select [ 1, !Ref ProjectTags1 ] 
        - Key: !Select [ 0, !Ref ProjectTags2 ]
          Value: !Select [ 1, !Ref ProjectTags2 ] 
      VpcId: !Ref MyVPC

  ## APPLICATION LOAD BALANCER
  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: loadbalancer-finalproject
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref MySecurityGroup
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags: 
        - Key: !Select [ 0, !Ref ProjectTags1 ]
          Value: !Select [ 1, !Ref ProjectTags1 ] 
        - Key: !Select [ 0, !Ref ProjectTags2 ]
          Value: !Select [ 1, !Ref ProjectTags2 ] 
      Type: application
  ## Target group
  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: 'true'
      HealthCheckIntervalSeconds: 300
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 120
      HealthyThresholdCount: 5
      IpAddressType: ipv4
      Name: targetgroup-finalproject
      Port: 80
      Protocol: HTTP
      Tags: 
        - Key: !Select [ 0, !Ref ProjectTags1 ]
          Value: !Select [ 1, !Ref ProjectTags1 ] 
        - Key: !Select [ 0, !Ref ProjectTags2 ]
          Value: !Select [ 1, !Ref ProjectTags2 ] 
      UnhealthyThresholdCount: 5
      VpcId: !Ref MyVPC
  ## Load balancer's listener  
  LbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: 
        - Type: forward
          ForwardConfig: 
            TargetGroups:
              - TargetGroupArn: !Ref MyTargetGroup
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: 80
      Protocol: HTTP

  ## AUTOSCALING GROUPS
  MyAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: autoscaling-finalproject
      DesiredCapacity: 2
      DesiredCapacityType: units
      HealthCheckGracePeriod: 300
      LaunchTemplate: 
          LaunchTemplateId: !Ref MyLaunchTemplate
          Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
      MaxSize: 3
      MinSize: 1
      TargetGroupARNs: 
        - !Ref MyTargetGroup
      VPCZoneIdentifier: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2 
      Tags:  
        - Key: !Select [ 0, !Ref ProjectTags1 ]
          Value: !Select [ 1, !Ref ProjectTags1 ] 
          PropagateAtLaunch: "false"
        - Key: !Select [ 0, !Ref ProjectTags2 ]
          Value: !Select [ 1, !Ref ProjectTags2 ] 
          PropagateAtLaunch: "false"

  MyAutoScalingGroup2:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: autoscaling-finalproject2
      DesiredCapacity: 2
      DesiredCapacityType: units
      HealthCheckGracePeriod: 300
      LaunchTemplate: 
          LaunchTemplateId: !Ref MyLaunchTemplate
          Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
      MaxSize: 3
      MinSize: 1
      TargetGroupARNs: 
        - !Ref MyTargetGroup
      VPCZoneIdentifier: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2  
      Tags:  
        - Key: !Select [ 0, !Ref ProjectTags1 ]
          Value: !Select [ 1, !Ref ProjectTags1 ] 
          PropagateAtLaunch: "false"
        - Key: !Select [ 0, !Ref ProjectTags2 ]
          Value: !Select [ 1, !Ref ProjectTags2 ] 
          PropagateAtLaunch: "false"

## OUTPUT
Outputs:
  ALBDNSName: 
    Description: "Final project's output: the DNS name for the load balancer."
    Value: !GetAtt MyLoadBalancer.DNSName 